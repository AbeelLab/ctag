package nl.tudelft.pl2.data.loaders

import java.io.File
import java.nio.file.{Files, Path}

import scala.collection.JavaConverters

/**
  * A [[List]] of paths generated by the given path to
  * the source GFA-path. The GFA-path generated sibling
  * paths at which header, index, heat-map, etc. files
  * are stored.
  *
  * The [[GraphPathCollection]] allows for iteration over
  * its paths for ease of use. For example one might want
  * to delete all generated additional files, which they
  * might do using a forEach iterator.
  *
  * Note: the collection does not include the originally
  * provided GFA-path, as often we do not need it to iterate
  * over as it has a special function as the source file.
  *
  * @param gfaPath The path to the original source GFA-file
  *                from which cache-files will be generated.
  */
class GraphPathCollection(val gfaPath: Path) extends java.util.AbstractList[Path] {

  /**
    * The name of the GFA file without extension.
    */
  private val gfaName: String = {
    val name = gfaPath.getFileName.toString
    if (name.contains('.')) {
      name.substring(0, name.lastIndexOf('.'))
    } else {
      name
    }
  }

  /**
    * The last modified timestamp of the GFA file.
    */
  private val timeStamp: String =
    new File(gfaPath.toUri).lastModified().toString + "-"

  /**
    * The application data directory for ctag.
    */
  private val cacheDirectory = gfaPath.resolveSibling(timeStamp + gfaName)

  /**
    * Initializes the app-data directory by checking if
    * it exists and, if not, creating it.
    */
  private val _: Unit = if (!cacheDirectory.toFile.exists()) {
    Files.createDirectories(cacheDirectory)
  }


  /**
    * Header file extension.
    */
  private val HEADER_EXT = ".hdr"
  /**
    * Zeroth-zoom-level file extension.
    */
  private val CTAG_ZERO_EXT = ".ctg0"
  /**
    * Zeroth-zoom-level index file extension.
    */
  private val INDEX_ZERO_EXT = ".idx0"

  /**
    * First-zoom-level file extension.
    */
  private val CTAG_ONE_EXT = ".ctg1"
  /**
    * First-zoom-level index file extension.
    */
  private val INDEX_ONE_EXT = ".idx1"

  /**
    * Second-zoom-level file extension.
    */
  private val CTAG_TWO_EXT = ".ctg2"
  /**
    * Second-zoom-level index file extension.
    */
  private val INDEX_TWO_EXT = ".idx2"
  /**
    * Heat map file extension.
    */
  private val HEAT_MAP_EXT = ".hmp"

  /**
    * Bookmark file extension.
    */
  private val BOOKMARK_EXT = ".bkm"

  /**
    * Path to the generated header file.
    */
  val headerPath: Path =
    cacheDirectory.resolve(timeStamp + gfaName + HEADER_EXT)
  /**
    * Path to the generated zeroth-zoom-data file.
    */
  val zeroFilePath: Path =
    cacheDirectory.resolve(timeStamp + gfaName + CTAG_ZERO_EXT)
  /**
    * Path to the generated zeroth-zoom-index file.
    */

  val zeroIndexPath: Path =
    cacheDirectory.resolve(timeStamp + gfaName + INDEX_ZERO_EXT)
  /**
    * Path to the generated first-zoom-data file.
    */
  val oneFilePath: Path =
    cacheDirectory.resolve(timeStamp + gfaName + CTAG_ONE_EXT)
  /**
    * Path to the generated first-zoom-index file.
    */
  val oneIndexPath: Path =
    cacheDirectory.resolve(timeStamp + gfaName + INDEX_ONE_EXT)

  /**
    * Path to the generated second-zoom-data file.
    */
  val twoFilePath: Path =
    cacheDirectory.resolve(timeStamp + gfaName + CTAG_TWO_EXT)
  /**
    * Path to the generated second-zoom-index file.
    */
  val twoIndexPath: Path =
    cacheDirectory.resolve(timeStamp + gfaName + INDEX_TWO_EXT)
  /**
    * Path to the generated heat-map file.
    */
  val heatMapPath: Path =
    cacheDirectory.resolve(timeStamp + gfaName + HEAT_MAP_EXT)

  /**
    * Path to the generated bookmark file.
    */
  val bookmarkPath: Path =
    cacheDirectory.resolve(timeStamp + gfaName + BOOKMARK_EXT)

  /**
    * List of paths used as the underlying structure
    * that is used when querying this [[GraphPathCollection]]
    * as a [[List]].
    */
  private val listOfPaths: java.util.List[Path] =
    JavaConverters.seqAsJavaList(List(headerPath, zeroFilePath, zeroIndexPath, oneFilePath,
      oneIndexPath,
      heatMapPath))

  override def get(index: Int): Path =
    listOfPaths.get(index)

  override def size(): Int =
    listOfPaths.size()

}
